/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const PASS_DISCRIMINATOR = new Uint8Array([
  40, 247, 140, 113, 56, 14, 57, 44,
]);

export function getPassDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(PASS_DISCRIMINATOR);
}

export type Pass = {
  discriminator: ReadonlyUint8Array;
  creator: Address;
  tier: Address;
  wallet: Address;
  expiryTs: bigint;
};

export type PassArgs = {
  creator: Address;
  tier: Address;
  wallet: Address;
  expiryTs: number | bigint;
};

export function getPassEncoder(): FixedSizeEncoder<PassArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['creator', getAddressEncoder()],
      ['tier', getAddressEncoder()],
      ['wallet', getAddressEncoder()],
      ['expiryTs', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: PASS_DISCRIMINATOR })
  );
}

export function getPassDecoder(): FixedSizeDecoder<Pass> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['creator', getAddressDecoder()],
    ['tier', getAddressDecoder()],
    ['wallet', getAddressDecoder()],
    ['expiryTs', getU64Decoder()],
  ]);
}

export function getPassCodec(): FixedSizeCodec<PassArgs, Pass> {
  return combineCodec(getPassEncoder(), getPassDecoder());
}

export function decodePass<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Pass, TAddress>;
export function decodePass<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Pass, TAddress>;
export function decodePass<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Pass, TAddress> | MaybeAccount<Pass, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPassDecoder()
  );
}

export async function fetchPass<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Pass, TAddress>> {
  const maybeAccount = await fetchMaybePass(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePass<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Pass, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePass(maybeAccount);
}

export async function fetchAllPass(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Pass>[]> {
  const maybeAccounts = await fetchAllMaybePass(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePass(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Pass>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodePass(maybeAccount));
}

export function getPassSize(): number {
  return 112;
}
