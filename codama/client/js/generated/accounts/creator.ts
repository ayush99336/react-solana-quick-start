/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const CREATOR_DISCRIMINATOR = new Uint8Array([
  237, 37, 233, 153, 165, 132, 54, 103,
]);

export function getCreatorDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CREATOR_DISCRIMINATOR);
}

export type Creator = {
  discriminator: ReadonlyUint8Array;
  owner: Address;
  payoutWallet: Address;
};

export type CreatorArgs = { owner: Address; payoutWallet: Address };

export function getCreatorEncoder(): FixedSizeEncoder<CreatorArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['owner', getAddressEncoder()],
      ['payoutWallet', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATOR_DISCRIMINATOR })
  );
}

export function getCreatorDecoder(): FixedSizeDecoder<Creator> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['owner', getAddressDecoder()],
    ['payoutWallet', getAddressDecoder()],
  ]);
}

export function getCreatorCodec(): FixedSizeCodec<CreatorArgs, Creator> {
  return combineCodec(getCreatorEncoder(), getCreatorDecoder());
}

export function decodeCreator<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Creator, TAddress>;
export function decodeCreator<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Creator, TAddress>;
export function decodeCreator<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Creator, TAddress> | MaybeAccount<Creator, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getCreatorDecoder()
  );
}

export async function fetchCreator<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Creator, TAddress>> {
  const maybeAccount = await fetchMaybeCreator(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeCreator<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Creator, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeCreator(maybeAccount);
}

export async function fetchAllCreator(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Creator>[]> {
  const maybeAccounts = await fetchAllMaybeCreator(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeCreator(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Creator>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeCreator(maybeAccount));
}

export function getCreatorSize(): number {
  return 72;
}
