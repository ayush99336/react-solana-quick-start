/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const TIER_DISCRIMINATOR = new Uint8Array([
  18, 149, 18, 34, 50, 201, 207, 55,
]);

export function getTierDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(TIER_DISCRIMINATOR);
}

export type Tier = {
  discriminator: ReadonlyUint8Array;
  creator: Address;
  index: number;
  priceLamports: bigint;
  tokenMint: Address;
  durationSec: bigint;
  name: string;
  uri: string;
  scholarshipRemaining: number;
};

export type TierArgs = {
  creator: Address;
  index: number;
  priceLamports: number | bigint;
  tokenMint: Address;
  durationSec: number | bigint;
  name: string;
  uri: string;
  scholarshipRemaining: number;
};

export function getTierEncoder(): Encoder<TierArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['creator', getAddressEncoder()],
      ['index', getU32Encoder()],
      ['priceLamports', getU64Encoder()],
      ['tokenMint', getAddressEncoder()],
      ['durationSec', getU64Encoder()],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['uri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['scholarshipRemaining', getU32Encoder()],
    ]),
    (value) => ({ ...value, discriminator: TIER_DISCRIMINATOR })
  );
}

export function getTierDecoder(): Decoder<Tier> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['creator', getAddressDecoder()],
    ['index', getU32Decoder()],
    ['priceLamports', getU64Decoder()],
    ['tokenMint', getAddressDecoder()],
    ['durationSec', getU64Decoder()],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['uri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['scholarshipRemaining', getU32Decoder()],
  ]);
}

export function getTierCodec(): Codec<TierArgs, Tier> {
  return combineCodec(getTierEncoder(), getTierDecoder());
}

export function decodeTier<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Tier, TAddress>;
export function decodeTier<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Tier, TAddress>;
export function decodeTier<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Tier, TAddress> | MaybeAccount<Tier, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getTierDecoder()
  );
}

export async function fetchTier<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Tier, TAddress>> {
  const maybeAccount = await fetchMaybeTier(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTier<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Tier, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeTier(maybeAccount);
}

export async function fetchAllTier(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Tier>[]> {
  const maybeAccounts = await fetchAllMaybeTier(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeTier(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Tier>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeTier(maybeAccount));
}
