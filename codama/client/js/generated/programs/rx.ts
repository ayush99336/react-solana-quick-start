/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedCreateTierInstruction,
  type ParsedGrantScholarshipInstruction,
  type ParsedInitCreatorInstruction,
  type ParsedRefillScholarshipsInstruction,
  type ParsedSubscribeOrRenewInstruction,
} from '../instructions';

export const RX_PROGRAM_ADDRESS =
  'D43Xs9NAXeKBHUhDATKua8kvJhmr5gXMNPTdMfR2z29n' as Address<'D43Xs9NAXeKBHUhDATKua8kvJhmr5gXMNPTdMfR2z29n'>;

export enum RxAccount {
  Creator,
  Pass,
  Tier,
}

export function identifyRxAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): RxAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([237, 37, 233, 153, 165, 132, 54, 103])
      ),
      0
    )
  ) {
    return RxAccount.Creator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([40, 247, 140, 113, 56, 14, 57, 44])
      ),
      0
    )
  ) {
    return RxAccount.Pass;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([18, 149, 18, 34, 50, 201, 207, 55])
      ),
      0
    )
  ) {
    return RxAccount.Tier;
  }
  throw new Error(
    'The provided account could not be identified as a rx account.'
  );
}

export enum RxInstruction {
  CreateTier,
  GrantScholarship,
  InitCreator,
  RefillScholarships,
  SubscribeOrRenew,
}

export function identifyRxInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): RxInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([64, 146, 139, 178, 95, 123, 94, 244])
      ),
      0
    )
  ) {
    return RxInstruction.CreateTier;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([101, 18, 45, 203, 83, 252, 196, 10])
      ),
      0
    )
  ) {
    return RxInstruction.GrantScholarship;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([143, 37, 67, 139, 129, 118, 169, 236])
      ),
      0
    )
  ) {
    return RxInstruction.InitCreator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([24, 249, 146, 80, 100, 64, 41, 119])
      ),
      0
    )
  ) {
    return RxInstruction.RefillScholarships;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([12, 43, 136, 90, 218, 193, 55, 92])
      ),
      0
    )
  ) {
    return RxInstruction.SubscribeOrRenew;
  }
  throw new Error(
    'The provided instruction could not be identified as a rx instruction.'
  );
}

export type ParsedRxInstruction<
  TProgram extends string = 'D43Xs9NAXeKBHUhDATKua8kvJhmr5gXMNPTdMfR2z29n',
> =
  | ({
      instructionType: RxInstruction.CreateTier;
    } & ParsedCreateTierInstruction<TProgram>)
  | ({
      instructionType: RxInstruction.GrantScholarship;
    } & ParsedGrantScholarshipInstruction<TProgram>)
  | ({
      instructionType: RxInstruction.InitCreator;
    } & ParsedInitCreatorInstruction<TProgram>)
  | ({
      instructionType: RxInstruction.RefillScholarships;
    } & ParsedRefillScholarshipsInstruction<TProgram>)
  | ({
      instructionType: RxInstruction.SubscribeOrRenew;
    } & ParsedSubscribeOrRenewInstruction<TProgram>);
