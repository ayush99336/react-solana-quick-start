/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { RX_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_TIER_DISCRIMINATOR = new Uint8Array([
  64, 146, 139, 178, 95, 123, 94, 244,
]);

export function getCreateTierDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CREATE_TIER_DISCRIMINATOR);
}

export type CreateTierInstruction<
  TProgram extends string = typeof RX_PROGRAM_ADDRESS,
  TAccountCreator extends string | AccountMeta<string> = string,
  TAccountTier extends string | AccountMeta<string> = string,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountCreator extends string
        ? ReadonlyAccount<TAccountCreator>
        : TAccountCreator,
      TAccountTier extends string
        ? WritableAccount<TAccountTier>
        : TAccountTier,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateTierInstructionData = {
  discriminator: ReadonlyUint8Array;
  index: number;
  priceLamports: bigint;
  tokenMint: Address;
  durationSec: bigint;
  name: string;
  uri: string;
  scholarshipRemaining: number;
};

export type CreateTierInstructionDataArgs = {
  index: number;
  priceLamports: number | bigint;
  tokenMint: Address;
  durationSec: number | bigint;
  name: string;
  uri: string;
  scholarshipRemaining: number;
};

export function getCreateTierInstructionDataEncoder(): Encoder<CreateTierInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['index', getU32Encoder()],
      ['priceLamports', getU64Encoder()],
      ['tokenMint', getAddressEncoder()],
      ['durationSec', getU64Encoder()],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['uri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['scholarshipRemaining', getU32Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_TIER_DISCRIMINATOR })
  );
}

export function getCreateTierInstructionDataDecoder(): Decoder<CreateTierInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['index', getU32Decoder()],
    ['priceLamports', getU64Decoder()],
    ['tokenMint', getAddressDecoder()],
    ['durationSec', getU64Decoder()],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['uri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['scholarshipRemaining', getU32Decoder()],
  ]);
}

export function getCreateTierInstructionDataCodec(): Codec<
  CreateTierInstructionDataArgs,
  CreateTierInstructionData
> {
  return combineCodec(
    getCreateTierInstructionDataEncoder(),
    getCreateTierInstructionDataDecoder()
  );
}

export type CreateTierAsyncInput<
  TAccountCreator extends string = string,
  TAccountTier extends string = string,
  TAccountOwner extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  creator?: Address<TAccountCreator>;
  tier?: Address<TAccountTier>;
  owner: TransactionSigner<TAccountOwner>;
  systemProgram?: Address<TAccountSystemProgram>;
  index: CreateTierInstructionDataArgs['index'];
  priceLamports: CreateTierInstructionDataArgs['priceLamports'];
  tokenMint: CreateTierInstructionDataArgs['tokenMint'];
  durationSec: CreateTierInstructionDataArgs['durationSec'];
  name: CreateTierInstructionDataArgs['name'];
  uri: CreateTierInstructionDataArgs['uri'];
  scholarshipRemaining: CreateTierInstructionDataArgs['scholarshipRemaining'];
};

export async function getCreateTierInstructionAsync<
  TAccountCreator extends string,
  TAccountTier extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof RX_PROGRAM_ADDRESS,
>(
  input: CreateTierAsyncInput<
    TAccountCreator,
    TAccountTier,
    TAccountOwner,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateTierInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountTier,
    TAccountOwner,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? RX_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    creator: { value: input.creator ?? null, isWritable: false },
    tier: { value: input.tier ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.creator.value) {
    accounts.creator.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([99, 114, 101, 97, 116, 111, 114])
        ),
        getAddressEncoder().encode(expectAddress(accounts.owner.value)),
      ],
    });
  }
  if (!accounts.tier.value) {
    accounts.tier.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([116, 105, 101, 114])),
        getAddressEncoder().encode(expectAddress(accounts.creator.value)),
        getU32Encoder().encode(expectSome(args.index)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.tier),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateTierInstructionDataEncoder().encode(
      args as CreateTierInstructionDataArgs
    ),
  } as CreateTierInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountTier,
    TAccountOwner,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CreateTierInput<
  TAccountCreator extends string = string,
  TAccountTier extends string = string,
  TAccountOwner extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  creator: Address<TAccountCreator>;
  tier: Address<TAccountTier>;
  owner: TransactionSigner<TAccountOwner>;
  systemProgram?: Address<TAccountSystemProgram>;
  index: CreateTierInstructionDataArgs['index'];
  priceLamports: CreateTierInstructionDataArgs['priceLamports'];
  tokenMint: CreateTierInstructionDataArgs['tokenMint'];
  durationSec: CreateTierInstructionDataArgs['durationSec'];
  name: CreateTierInstructionDataArgs['name'];
  uri: CreateTierInstructionDataArgs['uri'];
  scholarshipRemaining: CreateTierInstructionDataArgs['scholarshipRemaining'];
};

export function getCreateTierInstruction<
  TAccountCreator extends string,
  TAccountTier extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof RX_PROGRAM_ADDRESS,
>(
  input: CreateTierInput<
    TAccountCreator,
    TAccountTier,
    TAccountOwner,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateTierInstruction<
  TProgramAddress,
  TAccountCreator,
  TAccountTier,
  TAccountOwner,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? RX_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    creator: { value: input.creator ?? null, isWritable: false },
    tier: { value: input.tier ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.tier),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateTierInstructionDataEncoder().encode(
      args as CreateTierInstructionDataArgs
    ),
  } as CreateTierInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountTier,
    TAccountOwner,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreateTierInstruction<
  TProgram extends string = typeof RX_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    creator: TAccountMetas[0];
    tier: TAccountMetas[1];
    owner: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: CreateTierInstructionData;
};

export function parseCreateTierInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateTierInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      creator: getNextAccount(),
      tier: getNextAccount(),
      owner: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateTierInstructionDataDecoder().decode(instruction.data),
  };
}
