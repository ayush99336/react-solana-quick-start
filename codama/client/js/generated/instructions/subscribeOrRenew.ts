/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { RX_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const SUBSCRIBE_OR_RENEW_DISCRIMINATOR = new Uint8Array([
  12, 43, 136, 90, 218, 193, 55, 92,
]);

export function getSubscribeOrRenewDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SUBSCRIBE_OR_RENEW_DISCRIMINATOR
  );
}

export type SubscribeOrRenewInstruction<
  TProgram extends string = typeof RX_PROGRAM_ADDRESS,
  TAccountCreator extends string | AccountMeta<string> = string,
  TAccountTier extends string | AccountMeta<string> = string,
  TAccountPayout extends string | AccountMeta<string> = string,
  TAccountPass extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountCreator extends string
        ? ReadonlyAccount<TAccountCreator>
        : TAccountCreator,
      TAccountTier extends string
        ? ReadonlyAccount<TAccountTier>
        : TAccountTier,
      TAccountPayout extends string
        ? WritableAccount<TAccountPayout>
        : TAccountPayout,
      TAccountPass extends string
        ? WritableAccount<TAccountPass>
        : TAccountPass,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SubscribeOrRenewInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type SubscribeOrRenewInstructionDataArgs = {};

export function getSubscribeOrRenewInstructionDataEncoder(): FixedSizeEncoder<SubscribeOrRenewInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: SUBSCRIBE_OR_RENEW_DISCRIMINATOR })
  );
}

export function getSubscribeOrRenewInstructionDataDecoder(): FixedSizeDecoder<SubscribeOrRenewInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getSubscribeOrRenewInstructionDataCodec(): FixedSizeCodec<
  SubscribeOrRenewInstructionDataArgs,
  SubscribeOrRenewInstructionData
> {
  return combineCodec(
    getSubscribeOrRenewInstructionDataEncoder(),
    getSubscribeOrRenewInstructionDataDecoder()
  );
}

export type SubscribeOrRenewAsyncInput<
  TAccountCreator extends string = string,
  TAccountTier extends string = string,
  TAccountPayout extends string = string,
  TAccountPass extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  creator: Address<TAccountCreator>;
  tier: Address<TAccountTier>;
  payout: Address<TAccountPayout>;
  pass?: Address<TAccountPass>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getSubscribeOrRenewInstructionAsync<
  TAccountCreator extends string,
  TAccountTier extends string,
  TAccountPayout extends string,
  TAccountPass extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof RX_PROGRAM_ADDRESS,
>(
  input: SubscribeOrRenewAsyncInput<
    TAccountCreator,
    TAccountTier,
    TAccountPayout,
    TAccountPass,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  SubscribeOrRenewInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountTier,
    TAccountPayout,
    TAccountPass,
    TAccountPayer,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? RX_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    creator: { value: input.creator ?? null, isWritable: false },
    tier: { value: input.tier ?? null, isWritable: false },
    payout: { value: input.payout ?? null, isWritable: true },
    pass: { value: input.pass ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.pass.value) {
    accounts.pass.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([112, 97, 115, 115])),
        getAddressEncoder().encode(expectAddress(accounts.tier.value)),
        getAddressEncoder().encode(expectAddress(accounts.payer.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.tier),
      getAccountMeta(accounts.payout),
      getAccountMeta(accounts.pass),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getSubscribeOrRenewInstructionDataEncoder().encode({}),
  } as SubscribeOrRenewInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountTier,
    TAccountPayout,
    TAccountPass,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type SubscribeOrRenewInput<
  TAccountCreator extends string = string,
  TAccountTier extends string = string,
  TAccountPayout extends string = string,
  TAccountPass extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  creator: Address<TAccountCreator>;
  tier: Address<TAccountTier>;
  payout: Address<TAccountPayout>;
  pass: Address<TAccountPass>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getSubscribeOrRenewInstruction<
  TAccountCreator extends string,
  TAccountTier extends string,
  TAccountPayout extends string,
  TAccountPass extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof RX_PROGRAM_ADDRESS,
>(
  input: SubscribeOrRenewInput<
    TAccountCreator,
    TAccountTier,
    TAccountPayout,
    TAccountPass,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SubscribeOrRenewInstruction<
  TProgramAddress,
  TAccountCreator,
  TAccountTier,
  TAccountPayout,
  TAccountPass,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? RX_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    creator: { value: input.creator ?? null, isWritable: false },
    tier: { value: input.tier ?? null, isWritable: false },
    payout: { value: input.payout ?? null, isWritable: true },
    pass: { value: input.pass ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.tier),
      getAccountMeta(accounts.payout),
      getAccountMeta(accounts.pass),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getSubscribeOrRenewInstructionDataEncoder().encode({}),
  } as SubscribeOrRenewInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountTier,
    TAccountPayout,
    TAccountPass,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedSubscribeOrRenewInstruction<
  TProgram extends string = typeof RX_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    creator: TAccountMetas[0];
    tier: TAccountMetas[1];
    payout: TAccountMetas[2];
    pass: TAccountMetas[3];
    payer: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
  };
  data: SubscribeOrRenewInstructionData;
};

export function parseSubscribeOrRenewInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSubscribeOrRenewInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      creator: getNextAccount(),
      tier: getNextAccount(),
      payout: getNextAccount(),
      pass: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getSubscribeOrRenewInstructionDataDecoder().decode(instruction.data),
  };
}
