/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { RX_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INIT_CREATOR_DISCRIMINATOR = new Uint8Array([
  143, 37, 67, 139, 129, 118, 169, 236,
]);

export function getInitCreatorDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INIT_CREATOR_DISCRIMINATOR
  );
}

export type InitCreatorInstruction<
  TProgram extends string = typeof RX_PROGRAM_ADDRESS,
  TAccountCreator extends string | AccountMeta<string> = string,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountCreator extends string
        ? WritableAccount<TAccountCreator>
        : TAccountCreator,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitCreatorInstructionData = {
  discriminator: ReadonlyUint8Array;
  payoutWallet: Address;
};

export type InitCreatorInstructionDataArgs = { payoutWallet: Address };

export function getInitCreatorInstructionDataEncoder(): FixedSizeEncoder<InitCreatorInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['payoutWallet', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: INIT_CREATOR_DISCRIMINATOR })
  );
}

export function getInitCreatorInstructionDataDecoder(): FixedSizeDecoder<InitCreatorInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['payoutWallet', getAddressDecoder()],
  ]);
}

export function getInitCreatorInstructionDataCodec(): FixedSizeCodec<
  InitCreatorInstructionDataArgs,
  InitCreatorInstructionData
> {
  return combineCodec(
    getInitCreatorInstructionDataEncoder(),
    getInitCreatorInstructionDataDecoder()
  );
}

export type InitCreatorAsyncInput<
  TAccountCreator extends string = string,
  TAccountOwner extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  creator?: Address<TAccountCreator>;
  owner: TransactionSigner<TAccountOwner>;
  systemProgram?: Address<TAccountSystemProgram>;
  payoutWallet: InitCreatorInstructionDataArgs['payoutWallet'];
};

export async function getInitCreatorInstructionAsync<
  TAccountCreator extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof RX_PROGRAM_ADDRESS,
>(
  input: InitCreatorAsyncInput<
    TAccountCreator,
    TAccountOwner,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitCreatorInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountOwner,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? RX_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    creator: { value: input.creator ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.creator.value) {
    accounts.creator.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([99, 114, 101, 97, 116, 111, 114])
        ),
        getAddressEncoder().encode(expectAddress(accounts.owner.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitCreatorInstructionDataEncoder().encode(
      args as InitCreatorInstructionDataArgs
    ),
  } as InitCreatorInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountOwner,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitCreatorInput<
  TAccountCreator extends string = string,
  TAccountOwner extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  creator: Address<TAccountCreator>;
  owner: TransactionSigner<TAccountOwner>;
  systemProgram?: Address<TAccountSystemProgram>;
  payoutWallet: InitCreatorInstructionDataArgs['payoutWallet'];
};

export function getInitCreatorInstruction<
  TAccountCreator extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof RX_PROGRAM_ADDRESS,
>(
  input: InitCreatorInput<
    TAccountCreator,
    TAccountOwner,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitCreatorInstruction<
  TProgramAddress,
  TAccountCreator,
  TAccountOwner,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? RX_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    creator: { value: input.creator ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitCreatorInstructionDataEncoder().encode(
      args as InitCreatorInstructionDataArgs
    ),
  } as InitCreatorInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountOwner,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitCreatorInstruction<
  TProgram extends string = typeof RX_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    creator: TAccountMetas[0];
    owner: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: InitCreatorInstructionData;
};

export function parseInitCreatorInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitCreatorInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      creator: getNextAccount(),
      owner: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitCreatorInstructionDataDecoder().decode(instruction.data),
  };
}
